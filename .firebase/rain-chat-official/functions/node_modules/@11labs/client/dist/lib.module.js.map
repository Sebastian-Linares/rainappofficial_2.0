{"version":3,"file":"lib.module.js","sources":["../src/utils/audio.ts","../src/utils/rawAudioProcessor.ts","../src/utils/input.ts","../src/utils/audioConcatProcessor.ts","../src/utils/output.ts","../src/utils/events.ts","../src/utils/connection.ts","../src/index.ts"],"sourcesContent":["export function arrayBufferToBase64(b: ArrayBufferLike) {\n  const buffer = new Uint8Array(b);\n  // @ts-ignore\n  const base64Data = window.btoa(String.fromCharCode(...buffer));\n  return base64Data;\n}\n\nexport function base64ToArrayBuffer(base64: string): ArrayBuffer {\n  const binaryString = window.atob(base64);\n  const len = binaryString.length;\n  const bytes = new Uint8Array(len);\n  for (let i = 0; i < len; i++) {\n    bytes[i] = binaryString.charCodeAt(i);\n  }\n  return bytes.buffer;\n}\n","/*\n * ulaw encoding logic taken from the wavefile library\n * https://github.com/rochars/wavefile/blob/master/lib/codecs/mulaw.js\n */\n\nconst blob = new Blob(\n  [\n    // language=JavaScript\n    `\n      const BIAS = 0x84;\n      const CLIP = 32635;\n      const encodeTable = [\n        0,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,\n        4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,\n        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\n        5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n        6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,\n        7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7\n      ];\n      \n      function encodeSample(sample) {\n        let sign;\n        let exponent;\n        let mantissa;\n        let muLawSample;\n        sign = (sample >> 8) & 0x80;\n        if (sign !== 0) sample = -sample;\n        sample = sample + BIAS;\n        if (sample > CLIP) sample = CLIP;\n        exponent = encodeTable[(sample>>7) & 0xFF];\n        mantissa = (sample >> (exponent+3)) & 0x0F;\n        muLawSample = ~(sign | (exponent << 4) | mantissa);\n        \n        return muLawSample;\n      }\n    \n      class RawAudioProcessor extends AudioWorkletProcessor {\n        constructor() {\n          super();\n                    \n          this.port.onmessage = ({ data }) => {\n            this.buffer = []; // Initialize an empty buffer\n            this.bufferSize = data.sampleRate / 4;\n            \n            if (globalThis.LibSampleRate && sampleRate !== data.sampleRate) {\n              globalThis.LibSampleRate.create(1, sampleRate, data.sampleRate).then(resampler => {\n                this.resampler = resampler;\n              });\n            } \n          };\n        }\n        process(inputs) {\n          if (!this.buffer) {\n            return true;\n          }\n          \n          const input = inputs[0]; // Get the first input node\n          if (input.length > 0) {\n            let channelData = input[0]; // Get the first channel's data\n\n            // Resample the audio if necessary\n            if (this.resampler) {\n              channelData = this.resampler.full(channelData);\n            }\n\n            // Add channel data to the buffer\n            this.buffer.push(...channelData);\n            // Get max volume \n            let sum = 0.0;\n            for (let i = 0; i < channelData.length; i++) {\n              sum += channelData[i] * channelData[i];\n            }\n            const maxVolume = Math.sqrt(sum / channelData.length);\n            // Check if buffer size has reached or exceeded the threshold\n            if (this.buffer.length >= this.bufferSize) {\n              const float32Array = new Float32Array(this.buffer)\n              let encodedArray = this.format === \"ulaw\"\n                ? new Uint8Array(float32Array.length)\n                : new Int16Array(float32Array.length);\n\n              // Iterate through the Float32Array and convert each sample to PCM16\n              for (let i = 0; i < float32Array.length; i++) {\n                // Clamp the value to the range [-1, 1]\n                let sample = Math.max(-1, Math.min(1, float32Array[i]));\n\n                // Scale the sample to the range [-32768, 32767]\n                let value = sample < 0 ? sample * 32768 : sample * 32767;\n                if (this.format === \"ulaw\") {\n                  value = encodeSample(Math.round(value));\n                }\n\n                encodedArray[i] = value;\n              }\n\n              // Send the buffered data to the main script\n              this.port.postMessage([encodedArray, maxVolume]);\n\n              // Clear the buffer after sending\n              this.buffer = [];\n            }\n          }\n          return true; // Continue processing\n        }\n      }\n      registerProcessor(\"raw-audio-processor\", RawAudioProcessor);\n  `,\n  ],\n  { type: \"application/javascript\" }\n);\n\nexport const rawAudioProcessor = URL.createObjectURL(blob);\n","import { rawAudioProcessor } from \"./rawAudioProcessor\";\nimport { FormatConfig } from \"./connection\";\n\nexport type InputConfig = {\n  preferHeadphonesForIosDevices?: boolean;\n};\n\nconst LIBSAMPLERATE_JS =\n  \"https://cdn.jsdelivr.net/npm/@alexanderolsen/libsamplerate-js@2.1.2/dist/libsamplerate.worklet.js\";\n\nfunction isIosDevice() {\n  return (\n    [\n      \"iPad Simulator\",\n      \"iPhone Simulator\",\n      \"iPod Simulator\",\n      \"iPad\",\n      \"iPhone\",\n      \"iPod\",\n    ].includes(navigator.platform) ||\n    // iPad on iOS 13 detection\n    (navigator.userAgent.includes(\"Mac\") && \"ontouchend\" in document)\n  );\n}\n\nexport class Input {\n  public static async create({\n    sampleRate,\n    format,\n    preferHeadphonesForIosDevices,\n  }: FormatConfig & InputConfig): Promise<Input> {\n    let context: AudioContext | null = null;\n    let inputStream: MediaStream | null = null;\n\n    try {\n      const options: MediaTrackConstraints = {\n        sampleRate: { ideal: sampleRate },\n        echoCancellation: { ideal: true },\n        noiseSuppression: { ideal: true },\n      };\n\n      if (isIosDevice() && preferHeadphonesForIosDevices) {\n        const availableDevices =\n          await window.navigator.mediaDevices.enumerateDevices();\n        const idealDevice = availableDevices.find(\n          d =>\n            // cautious to include \"bluetooth\" in the search\n            // as might trigger bluetooth speakers\n            d.kind === \"audioinput\" &&\n            [\"airpod\", \"headphone\", \"earphone\"].find(keyword =>\n              d.label.toLowerCase().includes(keyword)\n            )\n        );\n        if (idealDevice) {\n          options.deviceId = { ideal: idealDevice.deviceId };\n        }\n      }\n\n      const supportsSampleRateConstraint =\n        navigator.mediaDevices.getSupportedConstraints().sampleRate;\n\n      context = new window.AudioContext(\n        supportsSampleRateConstraint ? { sampleRate } : {}\n      );\n      const analyser = context.createAnalyser();\n      if (!supportsSampleRateConstraint) {\n        await context.audioWorklet.addModule(LIBSAMPLERATE_JS);\n      }\n      await context.audioWorklet.addModule(rawAudioProcessor);\n\n      inputStream = await navigator.mediaDevices.getUserMedia({\n        audio: options,\n      });\n\n      const source = context.createMediaStreamSource(inputStream);\n      const worklet = new AudioWorkletNode(context, \"raw-audio-processor\");\n      worklet.port.postMessage({ type: \"setFormat\", format, sampleRate });\n\n      source.connect(analyser);\n      analyser.connect(worklet);\n\n      return new Input(context, analyser, worklet, inputStream);\n    } catch (error) {\n      inputStream?.getTracks().forEach(track => track.stop());\n      context?.close();\n      throw error;\n    }\n  }\n\n  private constructor(\n    public readonly context: AudioContext,\n    public readonly analyser: AnalyserNode,\n    public readonly worklet: AudioWorkletNode,\n    public readonly inputStream: MediaStream\n  ) {}\n\n  public async close() {\n    this.inputStream.getTracks().forEach(track => track.stop());\n    await this.context.close();\n  }\n}\n","/*\n * ulaw decoding logic taken from the wavefile library\n * https://github.com/rochars/wavefile/blob/master/lib/codecs/mulaw.js\n */\n\nconst blob = new Blob(\n  [\n    // language=JavaScript\n    `\n      const decodeTable = [0,132,396,924,1980,4092,8316,16764];\n      \n      export function decodeSample(muLawSample) {\n        let sign;\n        let exponent;\n        let mantissa;\n        let sample;\n        muLawSample = ~muLawSample;\n        sign = (muLawSample & 0x80);\n        exponent = (muLawSample >> 4) & 0x07;\n        mantissa = muLawSample & 0x0F;\n        sample = decodeTable[exponent] + (mantissa << (exponent+3));\n        if (sign !== 0) sample = -sample;\n\n        return sample;\n      }\n      \n      class AudioConcatProcessor extends AudioWorkletProcessor {\n        constructor() {\n          super();\n          this.buffers = []; // Initialize an empty buffer\n          this.cursor = 0;\n          this.currentBuffer = null;\n          this.wasInterrupted = false;\n          this.finished = false;\n          \n          this.port.onmessage = ({ data }) => {\n            switch (data.type) {\n              case \"setFormat\":\n                this.format = data.format;\n                break;\n              case \"buffer\":\n                this.wasInterrupted = false;\n                this.buffers.push(\n                  this.format === \"ulaw\"\n                    ? new Uint8Array(data.buffer)\n                    : new Int16Array(data.buffer)\n                );\n                break;\n              case \"interrupt\":\n                this.wasInterrupted = true;\n                break;\n              case \"clearInterrupted\":\n                if (this.wasInterrupted) {\n                  this.wasInterrupted = false;\n                  this.buffers = [];\n                  this.currentBuffer = null;\n                }\n            }\n          };\n        }\n        process(_, outputs) {\n          let finished = false;\n          const output = outputs[0][0];\n          for (let i = 0; i < output.length; i++) {\n            if (!this.currentBuffer) {\n              if (this.buffers.length === 0) {\n                finished = true;\n                break;\n              }\n              this.currentBuffer = this.buffers.shift();\n              this.cursor = 0;\n            }\n\n            let value = this.currentBuffer[this.cursor];\n            if (this.format === \"ulaw\") {\n              value = decodeSample(value);\n            }\n            output[i] = value / 32768;\n            this.cursor++;\n\n            if (this.cursor >= this.currentBuffer.length) {\n              this.currentBuffer = null;\n            }\n          }\n\n          if (this.finished !== finished) {\n            this.finished = finished;\n            this.port.postMessage({ type: \"process\", finished });\n          }\n\n          return true; // Continue processing\n        }\n      }\n\n      registerProcessor(\"audio-concat-processor\", AudioConcatProcessor);\n    `,\n  ],\n  { type: \"application/javascript\" }\n);\n\nexport const audioConcatProcessor = URL.createObjectURL(blob);\n","import { audioConcatProcessor } from \"./audioConcatProcessor\";\nimport { FormatConfig } from \"./connection\";\n\nexport class Output {\n  public static async create({\n    sampleRate,\n    format,\n  }: FormatConfig): Promise<Output> {\n    let context: AudioContext | null = null;\n    try {\n      context = new AudioContext({ sampleRate });\n      const analyser = context.createAnalyser();\n      const gain = context.createGain();\n      gain.connect(analyser);\n      analyser.connect(context.destination);\n      await context.audioWorklet.addModule(audioConcatProcessor);\n      const worklet = new AudioWorkletNode(context, \"audio-concat-processor\");\n      worklet.port.postMessage({ type: \"setFormat\", format });\n      worklet.connect(gain);\n\n      return new Output(context, analyser, gain, worklet);\n    } catch (error) {\n      context?.close();\n      throw error;\n    }\n  }\n\n  private constructor(\n    public readonly context: AudioContext,\n    public readonly analyser: AnalyserNode,\n    public readonly gain: GainNode,\n    public readonly worklet: AudioWorkletNode\n  ) {}\n\n  public async close() {\n    await this.context.close();\n  }\n}\n","import { Language } from \"./connection\";\n\nexport type UserTranscriptionEvent = {\n  type: \"user_transcript\";\n  user_transcription_event: { user_transcript: string };\n};\nexport type AgentResponseEvent = {\n  type: \"agent_response\";\n  agent_response_event: { agent_response: string };\n};\nexport type AgentAudioEvent = {\n  type: \"audio\";\n  audio_event: {\n    audio_base_64: string;\n    event_id: number;\n  };\n};\nexport type InterruptionEvent = {\n  type: \"interruption\";\n  interruption_event: {\n    event_id: number;\n  };\n};\nexport type InternalTentativeAgentResponseEvent = {\n  type: \"internal_tentative_agent_response\";\n  tentative_agent_response_internal_event: {\n    tentative_agent_response: string;\n  };\n};\nexport type ConfigEvent = {\n  type: \"conversation_initiation_metadata\";\n  conversation_initiation_metadata_event: {\n    conversation_id: string;\n    agent_output_audio_format: string;\n    user_input_audio_format?: string;\n  };\n};\nexport type PingEvent = {\n  type: \"ping\";\n  ping_event: {\n    event_id: number;\n    ping_ms?: number;\n  };\n};\nexport type ClientToolCallEvent = {\n  type: \"client_tool_call\";\n  client_tool_call: {\n    tool_name: string;\n    tool_call_id: string;\n    parameters: any;\n    expects_response: boolean;\n  };\n};\n\n// TODO correction missing\nexport type IncomingSocketEvent =\n  | UserTranscriptionEvent\n  | AgentResponseEvent\n  | AgentAudioEvent\n  | InterruptionEvent\n  | InternalTentativeAgentResponseEvent\n  | ConfigEvent\n  | PingEvent\n  | ClientToolCallEvent;\n\nexport type PongEvent = {\n  type: \"pong\";\n  event_id: number;\n};\nexport type UserAudioEvent = {\n  user_audio_chunk: string;\n};\nexport type UserFeedbackEvent = {\n  type: \"feedback\";\n  score: \"like\" | \"dislike\";\n  event_id: number;\n};\nexport type ClientToolResultEvent = {\n  type: \"client_tool_result\";\n  tool_call_id: string;\n  result: any;\n  is_error: boolean;\n};\nexport type InitiationClientDataEvent = {\n  type: \"conversation_initiation_client_data\";\n  conversation_config_override?: {\n    agent?: {\n      prompt?: {\n        prompt?: string;\n      };\n      first_message?: string;\n      language?: Language;\n    };\n    tts?: {\n      voice_id?: string;\n    };\n  };\n  custom_llm_extra_body?: any;\n  dynamic_variables?: Record<string, string | number | boolean>;\n};\nexport type OutgoingSocketEvent =\n  | PongEvent\n  | UserAudioEvent\n  | InitiationClientDataEvent\n  | UserFeedbackEvent\n  | ClientToolResultEvent;\n\nexport function isValidSocketEvent(event: any): event is IncomingSocketEvent {\n  return !!event.type;\n}\n","import {\n  InitiationClientDataEvent,\n  ConfigEvent,\n  isValidSocketEvent,\n  OutgoingSocketEvent,\n  IncomingSocketEvent,\n} from \"./events\";\n\nconst MAIN_PROTOCOL = \"convai\";\n\nexport type Language =\n  | \"en\"\n  | \"ja\"\n  | \"zh\"\n  | \"de\"\n  | \"hi\"\n  | \"fr\"\n  | \"ko\"\n  | \"pt\"\n  | \"it\"\n  | \"es\"\n  | \"id\"\n  | \"nl\"\n  | \"tr\"\n  | \"pl\"\n  | \"sv\"\n  | \"bg\"\n  | \"ro\"\n  | \"ar\"\n  | \"cs\"\n  | \"el\"\n  | \"fi\"\n  | \"ms\"\n  | \"da\"\n  | \"ta\"\n  | \"uk\"\n  | \"ru\"\n  | \"hu\"\n  | \"no\"\n  | \"vi\";\nexport type SessionConfig = {\n  origin?: string;\n  authorization?: string;\n  overrides?: {\n    agent?: {\n      prompt?: {\n        prompt?: string;\n      };\n      firstMessage?: string;\n      language?: Language;\n    };\n    tts?: {\n      voiceId?: string;\n    };\n  };\n  customLlmExtraBody?: any;\n  dynamicVariables?: Record<string, string | number | boolean>;\n} & (\n  | { signedUrl: string; agentId?: undefined }\n  | { agentId: string; signedUrl?: undefined }\n);\nexport type FormatConfig = {\n  format: \"pcm\" | \"ulaw\";\n  sampleRate: number;\n};\nexport type DisconnectionDetails =\n  | {\n      reason: \"error\";\n      message: string;\n      context: Event;\n    }\n  | {\n      reason: \"agent\";\n      context: CloseEvent;\n    }\n  | {\n      reason: \"user\";\n    };\nexport type OnDisconnectCallback = (details: DisconnectionDetails) => void;\nexport type OnMessageCallback = (event: IncomingSocketEvent) => void;\n\nconst WSS_API_ORIGIN = \"wss://api.elevenlabs.io\";\nconst WSS_API_PATHNAME = \"/v1/convai/conversation?agent_id=\";\n\nexport class Connection {\n  public static async create(config: SessionConfig): Promise<Connection> {\n    let socket: WebSocket | null = null;\n\n    try {\n      const origin = config.origin ?? WSS_API_ORIGIN;\n      const url = config.signedUrl\n        ? config.signedUrl\n        : origin + WSS_API_PATHNAME + config.agentId;\n\n      const protocols = [MAIN_PROTOCOL];\n      if (config.authorization) {\n        protocols.push(`bearer.${config.authorization}`);\n      }\n      socket = new WebSocket(url, protocols);\n      const conversationConfig = await new Promise<\n        ConfigEvent[\"conversation_initiation_metadata_event\"]\n      >((resolve, reject) => {\n        socket!.addEventListener(\n          \"open\",\n          () => {\n            const overridesEvent: InitiationClientDataEvent = {\n              type: \"conversation_initiation_client_data\",\n            };\n\n            if (config.overrides) {\n              overridesEvent.conversation_config_override = {\n                agent: {\n                  prompt: config.overrides.agent?.prompt,\n                  first_message: config.overrides.agent?.firstMessage,\n                  language: config.overrides.agent?.language,\n                },\n                tts: {\n                  voice_id: config.overrides.tts?.voiceId,\n                },\n              };\n            }\n\n            if (config.customLlmExtraBody) {\n              overridesEvent.custom_llm_extra_body = config.customLlmExtraBody;\n            }\n\n            if (config.dynamicVariables) {\n              overridesEvent.dynamic_variables = config.dynamicVariables;\n            }\n\n            socket?.send(JSON.stringify(overridesEvent));\n          },\n          { once: true }\n        );\n        socket!.addEventListener(\"error\", event => {\n          // In case the error event is followed by a close event, we want the\n          // latter to be the one that rejects the promise as it contains more\n          // useful information.\n          setTimeout(() => reject(event), 0);\n        });\n        socket!.addEventListener(\"close\", reject);\n        socket!.addEventListener(\n          \"message\",\n          (event: MessageEvent) => {\n            const message = JSON.parse(event.data);\n\n            if (!isValidSocketEvent(message)) {\n              return;\n            }\n\n            if (message.type === \"conversation_initiation_metadata\") {\n              resolve(message.conversation_initiation_metadata_event);\n            } else {\n              console.warn(\n                \"First received message is not conversation metadata.\"\n              );\n            }\n          },\n          { once: true }\n        );\n      });\n\n      const {\n        conversation_id,\n        agent_output_audio_format,\n        user_input_audio_format,\n      } = conversationConfig;\n\n      const inputFormat = parseFormat(user_input_audio_format ?? \"pcm_16000\");\n      const outputFormat = parseFormat(agent_output_audio_format);\n\n      return new Connection(socket, conversation_id, inputFormat, outputFormat);\n    } catch (error) {\n      socket?.close();\n      throw error;\n    }\n  }\n\n  private queue: IncomingSocketEvent[] = [];\n  private disconnectionDetails: DisconnectionDetails | null = null;\n  private onDisconnectCallback: OnDisconnectCallback | null = null;\n  private onMessageCallback: OnMessageCallback | null = null;\n\n  private constructor(\n    public readonly socket: WebSocket,\n    public readonly conversationId: string,\n    public readonly inputFormat: FormatConfig,\n    public readonly outputFormat: FormatConfig\n  ) {\n    this.socket.addEventListener(\"error\", event => {\n      // In case the error event is followed by a close event, we want the\n      // latter to be the one that disconnects the session as it contains more\n      // useful information.\n      setTimeout(\n        () =>\n          this.disconnect({\n            reason: \"error\",\n            message: \"The connection was closed due to a socket error.\",\n            context: event,\n          }),\n        0\n      );\n    });\n    this.socket.addEventListener(\"close\", event => {\n      this.disconnect(\n        event.code === 1000\n          ? {\n              reason: \"agent\",\n              context: event,\n            }\n          : {\n              reason: \"error\",\n              message:\n                event.reason || \"The connection was closed by the server.\",\n              context: event,\n            }\n      );\n    });\n    this.socket.addEventListener(\"message\", event => {\n      try {\n        const parsedEvent = JSON.parse(event.data);\n        if (!isValidSocketEvent(parsedEvent)) {\n          return;\n        }\n\n        if (this.onMessageCallback) {\n          this.onMessageCallback(parsedEvent);\n        } else {\n          this.queue.push(parsedEvent);\n        }\n      } catch (_) {}\n    });\n  }\n\n  public close() {\n    this.socket.close();\n  }\n\n  public sendMessage(message: OutgoingSocketEvent) {\n    this.socket.send(JSON.stringify(message));\n  }\n\n  public onMessage(callback: OnMessageCallback) {\n    this.onMessageCallback = callback;\n    this.queue.forEach(callback);\n    this.queue = [];\n  }\n\n  public onDisconnect(callback: OnDisconnectCallback) {\n    this.onDisconnectCallback = callback;\n    if (this.disconnectionDetails) {\n      callback(this.disconnectionDetails);\n    }\n  }\n\n  private disconnect(details: DisconnectionDetails) {\n    if (!this.disconnectionDetails) {\n      this.disconnectionDetails = details;\n      this.onDisconnectCallback?.(details);\n    }\n  }\n}\n\nfunction parseFormat(format: string): FormatConfig {\n  const [formatPart, sampleRatePart] = format.split(\"_\");\n  if (![\"pcm\", \"ulaw\"].includes(formatPart)) {\n    throw new Error(`Invalid format: ${format}`);\n  }\n\n  const sampleRate = parseInt(sampleRatePart);\n  if (isNaN(sampleRate)) {\n    throw new Error(`Invalid sample rate: ${sampleRatePart}`);\n  }\n\n  return {\n    format: formatPart as FormatConfig[\"format\"],\n    sampleRate,\n  };\n}\n","import { arrayBufferToBase64, base64ToArrayBuffer } from \"./utils/audio\";\nimport { Input, InputConfig } from \"./utils/input\";\nimport { Output } from \"./utils/output\";\nimport {\n  Connection,\n  DisconnectionDetails,\n  OnDisconnectCallback,\n  SessionConfig,\n} from \"./utils/connection\";\nimport { ClientToolCallEvent, IncomingSocketEvent } from \"./utils/events\";\n\nexport type { IncomingSocketEvent } from \"./utils/events\";\nexport type { SessionConfig, DisconnectionDetails } from \"./utils/connection\";\nexport type Role = \"user\" | \"ai\";\nexport type Mode = \"speaking\" | \"listening\";\nexport type Status =\n  | \"connecting\"\n  | \"connected\"\n  | \"disconnecting\"\n  | \"disconnected\";\nexport type Options = SessionConfig &\n  Callbacks &\n  ClientToolsConfig &\n  InputConfig;\nexport type ClientToolsConfig = {\n  clientTools: Record<\n    string,\n    (\n      parameters: any\n    ) => Promise<string | number | void> | string | number | void\n  >;\n};\nexport type Callbacks = {\n  onConnect: (props: { conversationId: string }) => void;\n  // internal debug events, not to be used\n  onDebug: (props: any) => void;\n  onDisconnect: OnDisconnectCallback;\n  onError: (message: string, context?: any) => void;\n  onMessage: (props: { message: string; source: Role }) => void;\n  onModeChange: (prop: { mode: Mode }) => void;\n  onStatusChange: (prop: { status: Status }) => void;\n  onCanSendFeedbackChange: (prop: { canSendFeedback: boolean }) => void;\n  onUnhandledClientToolCall?: (\n    params: ClientToolCallEvent[\"client_tool_call\"]\n  ) => void;\n};\n\nconst defaultClientTools = { clientTools: {} };\nconst defaultCallbacks: Callbacks = {\n  onConnect: () => {},\n  onDebug: () => {},\n  onDisconnect: () => {},\n  onError: () => {},\n  onMessage: () => {},\n  onModeChange: () => {},\n  onStatusChange: () => {},\n  onCanSendFeedbackChange: () => {},\n};\n\nconst HTTPS_API_ORIGIN = \"https://api.elevenlabs.io\";\n\nexport class Conversation {\n  public static async startSession(\n    options: SessionConfig &\n      Partial<Callbacks> &\n      Partial<ClientToolsConfig> &\n      Partial<InputConfig>\n  ): Promise<Conversation> {\n    const fullOptions: Options = {\n      ...defaultClientTools,\n      ...defaultCallbacks,\n      ...options,\n    };\n\n    fullOptions.onStatusChange({ status: \"connecting\" });\n    fullOptions.onCanSendFeedbackChange({ canSendFeedback: false });\n\n    let input: Input | null = null;\n    let connection: Connection | null = null;\n    let output: Output | null = null;\n\n    try {\n      // some browsers won't allow calling getSupportedConstraints or enumerateDevices\n      // before getting approval for microphone access\n      const preliminaryInputStream = await navigator.mediaDevices.getUserMedia({\n        audio: true,\n      });\n      preliminaryInputStream?.getTracks().forEach(track => track.stop());\n\n      connection = await Connection.create(options);\n      [input, output] = await Promise.all([\n        Input.create({\n          ...connection.inputFormat,\n          preferHeadphonesForIosDevices: options.preferHeadphonesForIosDevices,\n        }),\n        Output.create(connection.outputFormat),\n      ]);\n\n      return new Conversation(fullOptions, connection, input, output);\n    } catch (error) {\n      fullOptions.onStatusChange({ status: \"disconnected\" });\n      connection?.close();\n      await input?.close();\n      await output?.close();\n      throw error;\n    }\n  }\n\n  private lastInterruptTimestamp: number = 0;\n  private mode: Mode = \"listening\";\n  private status: Status = \"connecting\";\n  private inputFrequencyData?: Uint8Array;\n  private outputFrequencyData?: Uint8Array;\n  private volume: number = 1;\n  private currentEventId: number = 1;\n  private lastFeedbackEventId: number = 1;\n  private canSendFeedback: boolean = false;\n\n  private constructor(\n    private readonly options: Options,\n    private readonly connection: Connection,\n    public readonly input: Input,\n    public readonly output: Output\n  ) {\n    this.options.onConnect({ conversationId: connection.conversationId });\n\n    this.connection.onDisconnect(this.endSessionWithDetails);\n    this.connection.onMessage(this.onMessage);\n\n    this.input.worklet.port.onmessage = this.onInputWorkletMessage;\n    this.output.worklet.port.onmessage = this.onOutputWorkletMessage;\n    this.updateStatus(\"connected\");\n  }\n\n  public endSession = () => this.endSessionWithDetails({ reason: \"user\" });\n\n  private endSessionWithDetails = async (details: DisconnectionDetails) => {\n    if (this.status !== \"connected\" && this.status !== \"connecting\") return;\n    this.updateStatus(\"disconnecting\");\n\n    this.connection.close();\n    await this.input.close();\n    await this.output.close();\n\n    this.updateStatus(\"disconnected\");\n    this.options.onDisconnect(details);\n  };\n\n  private updateMode = (mode: Mode) => {\n    if (mode !== this.mode) {\n      this.mode = mode;\n      this.options.onModeChange({ mode });\n    }\n  };\n\n  private updateStatus = (status: Status) => {\n    if (status !== this.status) {\n      this.status = status;\n      this.options.onStatusChange({ status });\n    }\n  };\n\n  private updateCanSendFeedback = () => {\n    const canSendFeedback = this.currentEventId !== this.lastFeedbackEventId;\n    if (this.canSendFeedback !== canSendFeedback) {\n      this.canSendFeedback = canSendFeedback;\n      this.options.onCanSendFeedbackChange({ canSendFeedback });\n    }\n  };\n\n  private onMessage = async (parsedEvent: IncomingSocketEvent) => {\n    switch (parsedEvent.type) {\n      case \"interruption\": {\n        if (parsedEvent.interruption_event) {\n          this.lastInterruptTimestamp = parsedEvent.interruption_event.event_id;\n        }\n        this.fadeOutAudio();\n        break;\n      }\n\n      case \"agent_response\": {\n        this.options.onMessage({\n          source: \"ai\",\n          message: parsedEvent.agent_response_event.agent_response,\n        });\n        break;\n      }\n\n      case \"user_transcript\": {\n        this.options.onMessage({\n          source: \"user\",\n          message: parsedEvent.user_transcription_event.user_transcript,\n        });\n        break;\n      }\n\n      case \"internal_tentative_agent_response\": {\n        this.options.onDebug({\n          type: \"tentative_agent_response\",\n          response:\n            parsedEvent.tentative_agent_response_internal_event\n              .tentative_agent_response,\n        });\n        break;\n      }\n\n      case \"client_tool_call\": {\n        if (\n          this.options.clientTools.hasOwnProperty(\n            parsedEvent.client_tool_call.tool_name\n          )\n        ) {\n          try {\n            const result =\n              (await this.options.clientTools[\n                parsedEvent.client_tool_call.tool_name\n              ](parsedEvent.client_tool_call.parameters)) ??\n              \"Client tool execution successful.\"; // default client-tool call response\n\n            this.connection.sendMessage({\n              type: \"client_tool_result\",\n              tool_call_id: parsedEvent.client_tool_call.tool_call_id,\n              result: result,\n              is_error: false,\n            });\n          } catch (e) {\n            this.onError(\n              \"Client tool execution failed with following error: \" +\n                (e as Error)?.message,\n              {\n                clientToolName: parsedEvent.client_tool_call.tool_name,\n              }\n            );\n            this.connection.sendMessage({\n              type: \"client_tool_result\",\n              tool_call_id: parsedEvent.client_tool_call.tool_call_id,\n              result: \"Client tool execution failed: \" + (e as Error)?.message,\n              is_error: true,\n            });\n          }\n\n          break;\n        }\n\n        if (this.options.onUnhandledClientToolCall) {\n          this.options.onUnhandledClientToolCall(parsedEvent.client_tool_call);\n\n          break;\n        }\n\n        this.onError(\n          `Client tool with name ${parsedEvent.client_tool_call.tool_name} is not defined on client`,\n          {\n            clientToolName: parsedEvent.client_tool_call.tool_name,\n          }\n        );\n        this.connection.sendMessage({\n          type: \"client_tool_result\",\n          tool_call_id: parsedEvent.client_tool_call.tool_call_id,\n          result: `Client tool with name ${parsedEvent.client_tool_call.tool_name} is not defined on client`,\n          is_error: true,\n        });\n\n        break;\n      }\n\n      case \"audio\": {\n        if (this.lastInterruptTimestamp <= parsedEvent.audio_event.event_id) {\n          this.addAudioBase64Chunk(parsedEvent.audio_event.audio_base_64);\n          this.currentEventId = parsedEvent.audio_event.event_id;\n          this.updateCanSendFeedback();\n          this.updateMode(\"speaking\");\n        }\n        break;\n      }\n\n      case \"ping\": {\n        this.connection.sendMessage({\n          type: \"pong\",\n          event_id: parsedEvent.ping_event.event_id,\n        });\n        // parsedEvent.ping_event.ping_ms can be used on client side, for example\n        // to warn if ping is too high that experience might be degraded.\n        break;\n      }\n\n      // unhandled events are expected to be internal events\n      default: {\n        this.options.onDebug(parsedEvent);\n        break;\n      }\n    }\n  };\n\n  private onInputWorkletMessage = (event: MessageEvent): void => {\n    const rawAudioPcmData = event.data[0];\n    const maxVolume = event.data[1];\n\n    // check if the sound was loud enough, so we don't send unnecessary chunks\n    // then forward audio to websocket\n    //if (maxVolume > 0.001) {\n    if (this.status === \"connected\") {\n      this.connection.sendMessage({\n        user_audio_chunk: arrayBufferToBase64(rawAudioPcmData.buffer),\n        //sample_rate: this.inputAudioContext?.inputSampleRate || this.inputSampleRate,\n      });\n    }\n    //}\n  };\n\n  private onOutputWorkletMessage = ({ data }: MessageEvent): void => {\n    if (data.type === \"process\") {\n      this.updateMode(data.finished ? \"listening\" : \"speaking\");\n    }\n  };\n\n  private addAudioBase64Chunk = (chunk: string) => {\n    this.output.gain.gain.value = this.volume;\n    this.output.worklet.port.postMessage({ type: \"clearInterrupted\" });\n    this.output.worklet.port.postMessage({\n      type: \"buffer\",\n      buffer: base64ToArrayBuffer(chunk),\n    });\n  };\n\n  private fadeOutAudio = () => {\n    // mute agent\n    this.updateMode(\"listening\");\n    this.output.worklet.port.postMessage({ type: \"interrupt\" });\n    this.output.gain.gain.exponentialRampToValueAtTime(\n      0.0001,\n      this.output.context.currentTime + 2\n    );\n\n    // reset volume back\n    setTimeout(() => {\n      this.output.gain.gain.value = this.volume;\n      this.output.worklet.port.postMessage({ type: \"clearInterrupted\" });\n    }, 2000); // Adjust the duration as needed\n  };\n\n  private onError = (message: string, context?: any) => {\n    console.error(message, context);\n    this.options.onError(message, context);\n  };\n\n  private calculateVolume = (frequencyData: Uint8Array) => {\n    if (frequencyData.length === 0) {\n      return 0;\n    }\n\n    // TODO: Currently this averages all frequencies, but we should probably\n    // bias towards the frequencies that are more typical for human voice\n    let volume = 0;\n    for (let i = 0; i < frequencyData.length; i++) {\n      volume += frequencyData[i] / 255;\n    }\n    volume /= frequencyData.length;\n\n    return volume < 0 ? 0 : volume > 1 ? 1 : volume;\n  };\n\n  public getId = () => this.connection.conversationId;\n\n  public isOpen = () => this.status === \"connected\";\n\n  public setVolume = ({ volume }: { volume: number }) => {\n    this.volume = volume;\n  };\n\n  public getInputByteFrequencyData = () => {\n    this.inputFrequencyData ??= new Uint8Array(\n      this.input.analyser.frequencyBinCount\n    );\n    this.input.analyser.getByteFrequencyData(this.inputFrequencyData);\n    return this.inputFrequencyData;\n  };\n\n  public getOutputByteFrequencyData = () => {\n    this.outputFrequencyData ??= new Uint8Array(\n      this.output.analyser.frequencyBinCount\n    );\n    this.output.analyser.getByteFrequencyData(this.outputFrequencyData);\n    return this.outputFrequencyData;\n  };\n\n  public getInputVolume = () => {\n    return this.calculateVolume(this.getInputByteFrequencyData());\n  };\n\n  public getOutputVolume = () => {\n    return this.calculateVolume(this.getOutputByteFrequencyData());\n  };\n\n  public sendFeedback = (like: boolean) => {\n    if (!this.canSendFeedback) {\n      console.warn(\n        this.lastFeedbackEventId === 0\n          ? \"Cannot send feedback: the conversation has not started yet.\"\n          : \"Cannot send feedback: feedback has already been sent for the current response.\"\n      );\n      return;\n    }\n\n    this.connection.sendMessage({\n      type: \"feedback\",\n      score: like ? \"like\" : \"dislike\",\n      event_id: this.currentEventId,\n    });\n    this.lastFeedbackEventId = this.currentEventId;\n    this.updateCanSendFeedback();\n  };\n}\n\nexport function postOverallFeedback(\n  conversationId: string,\n  like: boolean,\n  origin: string = HTTPS_API_ORIGIN\n) {\n  return fetch(`${origin}/v1/convai/conversations/${conversationId}/feedback`, {\n    method: \"POST\",\n    body: JSON.stringify({\n      feedback: like ? \"like\" : \"dislike\",\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n}\n"],"names":["base64ToArrayBuffer","base64","binaryString","window","atob","len","length","bytes","Uint8Array","i","charCodeAt","buffer","blob","Blob","type","rawAudioProcessor","URL","createObjectURL","Input","context","analyser","worklet","inputStream","this","create","_ref","sampleRate","format","preferHeadphonesForIosDevices","Promise","resolve","_temp4","_temp2","audioWorklet","addModule","then","navigator","mediaDevices","getUserMedia","audio","options","_navigator$mediaDevic","source","createMediaStreamSource","AudioWorkletNode","port","postMessage","connect","supportsSampleRateConstraint","getSupportedConstraints","AudioContext","createAnalyser","_temp","ideal","echoCancellation","noiseSuppression","_temp3","isIosDevice","includes","platform","userAgent","document","enumerateDevices","availableDevices","idealDevice","find","d","kind","keyword","label","toLowerCase","deviceId","_catch","error","_inputStream","_context","getTracks","forEach","track","stop","close","e","reject","_proto","prototype","audioConcatProcessor","Output","gain","createGain","destination","isValidSocketEvent","event","Connection","socket","conversationId","inputFormat","outputFormat","_this","queue","disconnectionDetails","onDisconnectCallback","onMessageCallback","addEventListener","setTimeout","disconnect","reason","message","code","parsedEvent","JSON","parse","data","push","_","config","origin","_config$origin","url","signedUrl","agentId","protocols","authorization","WebSocket","_socket","_config$overrides$age","_config$overrides$age2","_config$overrides$age3","_config$overrides$tts","overridesEvent","overrides","conversation_config_override","agent","prompt","first_message","firstMessage","language","tts","voice_id","voiceId","customLlmExtraBody","custom_llm_extra_body","dynamicVariables","dynamic_variables","send","stringify","once","conversation_initiation_metadata_event","console","warn","conversationConfig","conversation_id","agent_output_audio_format","user_input_audio_format","parseFormat","_socket2","sendMessage","onMessage","callback","onDisconnect","details","_this$onDisconnectCal","call","_format$split","split","formatPart","sampleRatePart","Error","parseInt","isNaN","defaultClientTools","clientTools","_settle","pact","value","o","bind","state","s","v","observer","defaultCallbacks","onConnect","onDebug","onError","onModeChange","onStatusChange","onCanSendFeedbackChange","_Pact","onFulfilled","onRejected","result","Conversation","connection","input","output","_this2","_this3","lastInterruptTimestamp","mode","status","inputFrequencyData","outputFrequencyData","volume","currentEventId","lastFeedbackEventId","canSendFeedback","endSession","endSessionWithDetails","updateStatus","updateMode","updateCanSendFeedback","_interrupt","_temp5","_switch","interruption_event","event_id","fadeOutAudio","agent_response_event","agent_response","user_transcription_event","user_transcript","response","tentative_agent_response_internal_event","tentative_agent_response","onUnhandledClientToolCall","client_tool_call","tool_name","clientToolName","tool_call_id","is_error","hasOwnProperty","parameters","audio_event","addAudioBase64Chunk","audio_base_64","ping_event","onInputWorkletMessage","b","user_audio_chunk","btoa","String","fromCharCode","apply","onOutputWorkletMessage","finished","chunk","exponentialRampToValueAtTime","currentTime","calculateVolume","frequencyData","getId","isOpen","setVolume","_ref2","getInputByteFrequencyData","_this$inputFrequencyD","frequencyBinCount","getByteFrequencyData","getOutputByteFrequencyData","getInputVolume","getOutputVolume","sendFeedback","like","score","onmessage","startSession","fullOptions","_extends","preliminaryInputStream","_Connection$create","all","_Promise$all","_connection","_input","_output","postOverallFeedback","fetch","method","body","feedback","headers"],"mappings":"wNAOgB,SAAAA,EAAoBC,GAIlC,IAHA,IAAMC,EAAeC,OAAOC,KAAKH,GAC3BI,EAAMH,EAAaI,OACnBC,EAAQ,IAAIC,WAAWH,GACpBI,EAAI,EAAGA,EAAIJ,EAAKI,IACvBF,EAAME,GAAKP,EAAaQ,WAAWD,GAErC,OAAOF,EAAMI,MACf,CCVA,IAAMC,EAAO,IAAIC,KACf,CA8GC,07HACD,CAAEC,KAAM,2BAGGC,EAAoBC,IAAIC,gBAAgBL,GC/FxCM,eAAK,WAgEhB,SAAAA,EACkBC,EACAC,EACAC,EACAC,GAAwBC,KAHxBJ,aAAA,EAAAI,KACAH,cACAC,EAAAA,KAAAA,aACAC,EAAAA,KAAAA,mBAHAC,KAAOJ,QAAPA,EACAI,KAAQH,SAARA,EACAG,KAAOF,QAAPA,EACAE,KAAWD,YAAXA,CACf,QAACJ,EApEgBM,OAAM,SAAAC,GACxB,IAAAC,EAAUD,EAAVC,WACAC,EAAMF,EAANE,OACAC,EAA6BH,EAA7BG,kCAEA,IAAIT,EAA+B,KAC/BG,EAAkC,KAAK,OAAAO,QAAAC,gCAAA,oBAEvCC,IAAA,SAAAC,IAAA,OAAAH,QAAAC,QAkCIX,EAAQc,aAAaC,UAAUnB,IAAkBoB,KAAAN,WAAAA,OAAAA,QAAAC,QAEnCM,UAAUC,aAAaC,aAAa,CACtDC,MAAOC,KACPL,KAAA,SAAAM,GAEF,IAAMC,EAASvB,EAAQwB,wBAJvBrB,EAAWmB,GAKLpB,EAAU,IAAIuB,iBAAiBzB,EAAS,uBAM9C,OALAE,EAAQwB,KAAKC,YAAY,CAAEhC,KAAM,YAAaa,OAAAA,EAAQD,WAAAA,IAEtDgB,EAAOK,QAAQ3B,GACfA,EAAS2B,QAAQ1B,GAEN,IAAAH,EAAMC,EAASC,EAAUC,EAASC,EAAa,EAvB1D,EAAA,CAAA,IAAM0B,EACJZ,UAAUC,aAAaY,0BAA0BvB,WAK7CN,GAHND,EAAU,IAAIhB,OAAO+C,aACnBF,EAA+B,CAAEtB,WAAAA,GAAe,KAEzByB,iBAAiBC,EACtC,WAAA,IAACJ,EAA4BnB,OAAAA,QAAAC,QACzBX,EAAQc,aAAaC,UA1DjC,sGA0D4DC,KAAAiB,WAAAA,EAAAA,CADpD,GACoDA,OAAAA,GAAAA,EAAAjB,KAAAiB,EAAAjB,KAAAH,GAAAA,GA/BxD,CAAA,IAAMQ,EAAiC,CACrCd,WAAY,CAAE2B,MAAO3B,GACrB4B,iBAAkB,CAAED,OAAO,GAC3BE,iBAAkB,CAAEF,OAAO,IAC3BG,EAEEC,WAAAA,IA7BN,CACE,iBACA,mBACA,iBACA,OACA,SACA,QACAC,SAAStB,UAAUuB,WAEpBvB,UAAUwB,UAAUF,SAAS,QAAU,eAAgBG,WAoBjCjC,EAA6B,OAAAC,QAAAC,QAExC3B,OAAOiC,UAAUC,aAAayB,oBAAkB3B,KAAA,SADlD4B,GAEN,IAAMC,EAAcD,EAAiBE,KACnC,SAAAC,GAAC,MAGY,eAAXA,EAAEC,MACF,CAAC,SAAU,YAAa,YAAYF,KAAK,SAAAG,GACvC,OAAAF,EAAEG,MAAMC,cAAcZ,SAASU,EAAQ,EACxC,GAEDJ,IACFxB,EAAQ+B,SAAW,CAAElB,MAAOW,EAAYO,UAAWf,EAAAA,CAbnDC,GAamDD,OAAAA,GAAAA,EAAArB,KAAAqB,EAAArB,KAAAJ,GAAAA,GA4BzD,6DAlD2CyC,CAAA,EAkDlCC,SAAAA,GAAOC,IAAAA,EAAAC,EAGd,aAFAD,EAAApD,IAAAoD,EAAaE,YAAYC,QAAQ,SAAAC,UAASA,EAAMC,MAAM,UACtDJ,EAAAxD,IAAAwD,EAASK,QACHP,CACR,GACF,CAAC,MAAAQ,GAAA,OAAApD,QAAAqD,OAAAD,EAAAE,CAAAA,EAAAjE,EAAAkE,UASYJ,MAAA,WAAK,IAC4C,OAA5DzD,KAAKD,YAAYsD,YAAYC,QAAQ,SAAAC,GAAK,OAAIA,EAAMC,MAAM,GAAElD,QAAAC,QAA5DP,KACWJ,QAAQ6D,SAAO7C,KAC5B,WAAA,EAAA,CAAC,MAAA8C,UAAApD,QAAAqD,OAAAD,KAAA/D,CAAA,CA1Ee,GCpBZN,EAAO,IAAIC,KACf,CA0FC,swFACD,CAAEC,KAAM,2BAGGuE,EAAuBrE,IAAIC,gBAAgBL,GCjG3C0E,eAwBX,WAAA,SAAAA,EACkBnE,EACAC,EACAmE,EACAlE,GAAyBE,KAHzBJ,aAAA,EAAAI,KACAH,cACAmE,EAAAA,KAAAA,iBACAlE,aAAA,EAHAE,KAAOJ,QAAPA,EACAI,KAAQH,SAARA,EACAG,KAAIgE,KAAJA,EACAhE,KAAOF,QAAPA,CACf,QAACiE,EA5BgB9D,OAAA,SAAMC,GACxB,IAAAC,EAAUD,EAAVC,WACAC,EAAMF,EAANE,OACa,IACb,IAAIR,EAA+B,KAAK,OAAAU,QAAAC,iCAGhCV,GADND,EAAU,IAAI+B,aAAa,CAAExB,WAAAA,KACJyB,kBACnBoC,EAAOpE,EAAQqE,cAChBzC,QAAQ3B,GACbA,EAAS2B,QAAQ5B,EAAQsE,aAAa5D,QAAAC,QAChCX,EAAQc,aAAaC,UAAUmD,IAAqBlD,KAAA,WAC1D,IAAMd,EAAU,IAAIuB,iBAAiBzB,EAAS,0BAI9C,OAHAE,EAAQwB,KAAKC,YAAY,CAAEhC,KAAM,YAAaa,OAAAA,IAC9CN,EAAQ0B,QAAQwC,GAET,IAAID,EAAOnE,EAASC,EAAUmE,EAAMlE,EAAS,yBAZd,IAGhCD,EACAmE,sCAJgCf,CAAA,WAa/BC,GAAOE,IAAAA,EAEd,MADO,OAAPA,EAAAxD,IAAAwD,EAASK,QACHP,CACR,GACF,CAAC,MAAAQ,GAAA,OAAApD,QAAAqD,OAAAD,EAAA,CAAA,EAAAK,EAAAF,UASYJ,MAAK,WAAA,WACNnD,QAAAC,QAAJP,KAAKJ,QAAQ6D,SAAO7C,KAC5B,WAAA,EAAA,CAAC,MAAA8C,UAAApD,QAAAqD,OAAAD,KAAAK,CAAA,CATD,GCgFc,SAAAI,EAAmBC,GACjC,QAASA,EAAM7E,IACjB,CCrGA,IA4Ea8E,eAmGX,WAAA,SAAAA,EACkBC,EACAC,EACAC,EACAC,GAA0B,IAAAC,EAAA1E,KAAAA,KAH1BsE,YAAA,EAAAtE,KACAuE,oBAAA,EAAAvE,KACAwE,iBAAA,EAAAxE,KACAyE,kBAAA,EAAAzE,KATV2E,MAA+B,GAAE3E,KACjC4E,qBAAoD,KAAI5E,KACxD6E,qBAAoD,KAAI7E,KACxD8E,kBAA8C,KAGpC9E,KAAMsE,OAANA,EACAtE,KAAcuE,eAAdA,EACAvE,KAAWwE,YAAXA,EACAxE,KAAYyE,aAAZA,EAEhBzE,KAAKsE,OAAOS,iBAAiB,QAAS,SAAAX,GAIpCY,WACE,WACE,OAAAN,EAAKO,WAAW,CACdC,OAAQ,QACRC,QAAS,mDACTvF,QAASwE,GACT,EACJ,EAEJ,GACApE,KAAKsE,OAAOS,iBAAiB,QAAS,SAAAX,GACpCM,EAAKO,WACY,MAAfb,EAAMgB,KACF,CACEF,OAAQ,QACRtF,QAASwE,GAEX,CACEc,OAAQ,QACRC,QACEf,EAAMc,QAAU,2CAClBtF,QAASwE,GAGnB,GACApE,KAAKsE,OAAOS,iBAAiB,UAAW,SAAAX,GACtC,IACE,IAAMiB,EAAcC,KAAKC,MAAMnB,EAAMoB,MACrC,IAAKrB,EAAmBkB,GACtB,OAGEX,EAAKI,kBACPJ,EAAKI,kBAAkBO,GAEvBX,EAAKC,MAAMc,KAAKJ,EAEpB,CAAE,MAAOK,GACX,CAAA,EACF,CAACrB,EAnJmBpE,OAAM,SAAC0F,GAAqB,IAC9C,IAAIrB,EAA2B,KAAK,OAAAhE,QAAAC,iCAG5BqF,EAAsBC,OAAhBA,EAAGF,EAAOC,QAAMC,EARX,0BASXC,EAAMH,EAAOI,UACfJ,EAAOI,UACPH,EAVe,oCAUaD,EAAOK,QAEjCC,EAAY,CAtFF,UAuFZN,EAAOO,eACTD,EAAUR,KAAI,UAAWE,EAAOO,eAElC5B,EAAS,IAAI6B,UAAUL,EAAKG,GAAW3F,QAAAC,QACN,IAAID,QAEnC,SAACC,EAASoD,GACVW,EAAQS,iBACN,OACA,WAAKqB,IAAAA,EAKmBC,EAAAC,EAAAC,EAAAC,EAJhBC,EAA4C,CAChDlH,KAAM,uCAGJoG,EAAOe,YACTD,EAAeE,6BAA+B,CAC5CC,MAAO,CACLC,OAA8B,OAAxBR,EAAEV,EAAOe,UAAUE,YAAK,EAAtBP,EAAwBQ,OAChCC,cAAqC,OAAxBR,EAAEX,EAAOe,UAAUE,YAAK,EAAtBN,EAAwBS,aACvCC,SAAgC,OAAxBT,EAAEZ,EAAOe,UAAUE,YAAK,EAAtBL,EAAwBS,UAEpCC,IAAK,CACHC,SAAUV,OAAFA,EAAEb,EAAOe,UAAUO,UAAjBT,EAAAA,EAAsBW,WAKlCxB,EAAOyB,qBACTX,EAAeY,sBAAwB1B,EAAOyB,oBAG5CzB,EAAO2B,mBACTb,EAAec,kBAAoB5B,EAAO2B,kBAG5ClB,OAAAA,EAAA9B,IAAA8B,EAAQoB,KAAKlC,KAAKmC,UAAUhB,GAC9B,EACA,CAAEiB,MAAM,IAEVpD,EAAQS,iBAAiB,QAAS,SAAAX,GAIhCY,WAAW,WAAM,OAAArB,EAAOS,EAAM,EAAE,EAClC,GACAE,EAAQS,iBAAiB,QAASpB,GAClCW,EAAQS,iBACN,UACA,SAACX,GACC,IAAMe,EAAUG,KAAKC,MAAMnB,EAAMoB,MAE5BrB,EAAmBgB,KAIH,qCAAjBA,EAAQ5F,KACVgB,EAAQ4E,EAAQwC,wCAEhBC,QAAQC,KACN,wDAGN,EACA,CAAEH,MAAM,GAEZ,IAAE9G,KAAA,SA7DIkH,GA+DN,IACEC,EAGED,EAHFC,gBACAC,EAEEF,EAFFE,0BACAC,EACEH,EADFG,wBAGIzD,EAAc0D,EAAYD,MAAAA,EAAAA,EAA2B,aACrDxD,EAAeyD,EAAYF,GAEjC,OAAW,IAAA3D,EAAWC,EAAQyD,EAAiBvD,EAAaC,EAAc,yBArFxC,IAEhCoB,EACID,EACAE,EAIAG,sCAR4BhD,CAAA,EAsF3BC,SAAAA,GAAO,IAAAiF,EAEd,MADAA,OAAAA,EAAA7D,IAAA6D,EAAQ1E,QACFP,CACR,GACF,CAAC,MAAAQ,GAAApD,OAAAA,QAAAqD,OAAAD,EAAAE,CAAAA,EAAAA,IAAAA,EAAAS,EAAAR,UAoFAQ,OApFAT,EA0DMH,MAAA,WACLzD,KAAKsE,OAAOb,OACd,EAACG,EAEMwE,YAAA,SAAYjD,GACjBnF,KAAKsE,OAAOkD,KAAKlC,KAAKmC,UAAUtC,GAClC,EAACvB,EAEMyE,UAAA,SAAUC,GACftI,KAAK8E,kBAAoBwD,EACzBtI,KAAK2E,MAAMrB,QAAQgF,GACnBtI,KAAK2E,MAAQ,EACf,EAACf,EAEM2E,aAAA,SAAaD,GAClBtI,KAAK6E,qBAAuByD,EACxBtI,KAAK4E,sBACP0D,EAAStI,KAAK4E,qBAElB,EAAChB,EAEOqB,WAAA,SAAWuD,GACeC,IAAAA,EAA3BzI,KAAK4E,uBACR5E,KAAK4E,qBAAuB4D,EAC5BC,OAAAA,EAAAzI,KAAK6E,uBAAL4D,EAAAC,KAAI1I,KAAwBwI,GAEhC,EAACnE,CAAA,CA7ED,GAgFF,SAAS6D,EAAY9H,GACnB,IAAAuI,EAAqCvI,EAAOwI,MAAM,KAA3CC,EAAUF,EAAEG,GAAAA,EAAcH,EACjC,GAAA,IAAK,CAAC,MAAO,QAAQxG,SAAS0G,GAC5B,MAAU,IAAAE,MAAK,mBAAoB3I,GAGrC,IAAMD,EAAa6I,SAASF,GAC5B,GAAIG,MAAM9I,GACR,MAAU,IAAA4I,MAAK,wBAAyBD,GAG1C,MAAO,CACL1I,OAAQyI,EACR1I,WAAAA,EAEJ,wFCvOA,IAAM+I,EAAqB,CAAEC,YAAa,aA0C1BC,EAAAC,IAAmBC,WAC5B,mBACc,uBAQhBC,EAAAH,EAAAI,KAAA,KAAAH,EAAAI,cALKC,GAEHJ,EAAAA,EAAEK,EAMH,GAAAL,GAAAA,EAAW1I,KAEX,YADA0I,EAAA1I,KAAAwI,EAAYI,KAAO,KAAEH,EAACI,GAAAL,EAAAI,KAAA,KAAAH,EAAA,MAGzBK,EAAAD,IAE6BE,EAAAL,MAClBM,IAAqBL,EACnBK,GACNA,EAAAP,IA/DV,IAAMQ,EAA8B,CAClCC,UAAW,aACXC,QAAS,WAAQ,EACjBxB,aAAc,WAAK,EACnByB,QAAS,aACT3B,UAAW,WAAQ,EACnB4B,aAAc,WAAK,EACnBC,eAAgB,WAAK,EACrBC,wBAAyB,cAvDlBC,0BACT,SAAAA,IAAiB,QACjBA,EAAOvG,UACLjD,KAID,cAuCD,qBAEE,GAAA6I,EAAS,CACT,IAAAnB,EAAiB,EAAHmB,EAAGY,EAAAC,EACjB,GAAAhC,EAAc,CACd,IACAc,EAASmB,EAAO,EAAGjC,EAAAtI,KAAA2J,GACnB,CAAA,MAAAjG,GACA0F,EAAAmB,EAAgB,EAAK7G,EACrB,CACA,OAAA6G,CAEI,CAEN,WA2DqB,QACDvK,KAAAuJ,EAAA,SAAA7E,GACA,IA5DX,IAAM4E,EAAO5E,EAAAiF,IAMlBjF,EAAMgF,EACJN,EAAAmB,EAAqB,EAAAF,EAAAA,EAAAf,GAAAA,GAClBgB,EACHlB,EAAAmB,EAAU,EAAAD,EAAAhB,MAGDiB,aAGP7G,KACA6G,EAAA,EAAgC7G,GAGpC,MAII,IAxBK8G,eAAY,WAyDvB,SAAAA,EACmBvJ,EACAwJ,EACDC,EACAC,GAAc,IAAAC,EAe1B5K,KAAI6K,EAqCF7K,KAAI0E,YAvDOzD,aAAA,EAAAjB,KACAyK,gBAAA,EAAAzK,KACD0K,WACAC,EAAAA,KAAAA,mBAdVG,uBAAiC,EACjCC,KAAAA,KAAa,iBACbC,OAAiB,aACjBC,KAAAA,+BACAC,yBAAmB,EAAAlL,KACnBmL,OAAiB,EACjBC,KAAAA,eAAyB,EAACpL,KAC1BqL,oBAA8B,OAC9BC,iBAA2B,EAkB5BC,KAAAA,WAAa,WAAM,OAAA7G,EAAK8G,sBAAsB,CAAEtG,OAAQ,QAAS,EAAAlF,KAEhEwL,sBAA+BhD,SAAAA,GAAiC,IACtE,MAAoB,cAAhBoC,EAAKI,QAA0C,eAAhBJ,EAAKI,OAAyB1K,QAAAC,WACjEqK,EAAKa,aAAa,iBAElBb,EAAKH,WAAWhH,QAAQnD,QAAAC,QAClBqK,EAAKF,MAAMjH,SAAO7C,KAAA,WAAA,OAAAN,QAAAC,QAClBqK,EAAKD,OAAOlH,SAAO7C,KAAA,WAEzBgK,EAAKa,aAAa,gBAClBb,EAAK3J,QAAQsH,aAAaC,EAAS,EACrC,GAAA,CAAC,MAAA9E,GAAA,OAAApD,QAAAqD,OAAAD,EAAA,CAAA,EAAA1D,KAEO0L,WAAa,SAACX,GAChBA,IAASrG,EAAKqG,OAChBrG,EAAKqG,KAAOA,EACZrG,EAAKzD,QAAQgJ,aAAa,CAAEc,KAAAA,IAEhC,EAAC/K,KAEOyL,aAAe,SAACT,GAClBA,IAAWtG,EAAKsG,SAClBtG,EAAKsG,OAASA,EACdtG,EAAKzD,QAAQiJ,eAAe,CAAEc,OAAAA,IAElC,EAEQW,KAAAA,sBAAwB,WAC9B,IAAML,EAAkB5G,EAAK0G,iBAAmB1G,EAAK2G,oBACjD3G,EAAK4G,kBAAoBA,IAC3B5G,EAAK4G,gBAAkBA,EACvB5G,EAAKzD,QAAQkJ,wBAAwB,CAAEmB,gBAAAA,IAE3C,OAEQjD,UAAS,SAAUhD,GAAoC,IAAA,IAAAuG,EAAAC,uzBAAAC,CACrDzG,EAAY9F,KACb,CAAA,CAAA,WAAA,MAAA,cAAc,oBACb8F,EAAY0G,qBACdlB,EAAKC,uBAAyBzF,EAAY0G,mBAAmBC,UAE/DnB,EAAKoB,oBAAeL,IAErB,GAAA,CAAA,WAAA,MAEI,gBAAgB,EAAE,WAIlB,OAHHf,EAAK5J,QAAQoH,UAAU,CACrBlH,OAAQ,KACRgE,QAASE,EAAY6G,qBAAqBC,sBACzCP,EAAA,EAEJ,GAEI,CAAA,WAAA,MAAA,iBAAiB,aAMtB,OALEf,EAAK5J,QAAQoH,UAAU,CACrBlH,OAAQ,OACRgE,QAASE,EAAY+G,yBAAyBC,uBAC7CT,EAEL,EAAC,qBAEI,mCAAmC,EAAA,WAMnC,OALHf,EAAK5J,QAAQ8I,QAAQ,CACnBxK,KAAM,2BACN+M,SACEjH,EAAYkH,wCACTC,gCACJZ,EAAA,EAEJ,GAEI,CAAA,WAAA,MAAA,kBAAkB,aAAEpL,IAAAA,aAsCvB,GAAIqK,EAAK5J,QAAQwL,iCACf5B,EAAK5J,QAAQwL,0BAA0BpH,EAAYqH,uBAAkBd,KAKvEf,EAAKb,iCACsB3E,EAAYqH,iBAAiBC,sCACtD,CACEC,eAAgBvH,EAAYqH,iBAAiBC,YAGjD9B,EAAKJ,WAAWrC,YAAY,CAC1B7I,KAAM,qBACNsN,aAAcxH,EAAYqH,iBAAiBG,aAC3CtC,OAAiClF,yBAAAA,EAAYqH,iBAAiBC,UAAS,4BACvEG,UAAU,IACTlB,EAAA,CAAA,EAAA3J,EAAA,WAAA,GArDD4I,EAAK5J,QAAQkI,YAAY4D,eACvB1H,EAAYqH,iBAAiBC,WAC9B,CAAA,IAAAlM,EAAAA,WAAAmL,EAAA,CAAA,EAAA/J,EAAAoB,EAEG,WAAA,OAAA3C,QAAAC,QAEOsK,EAAK5J,QAAQkI,YAClB9D,EAAYqH,iBAAiBC,WAC7BtH,EAAYqH,iBAAiBM,aAAWpM,KAAA,SAHtC2J,GAMNM,EAAKJ,WAAWrC,YAAY,CAC1B7I,KAAM,qBACNsN,aAAcxH,EAAYqH,iBAAiBG,aAC3CtC,OAAQA,EACRuC,UAAU,GACT,EACL,EAASpJ,SAAAA,GACPmH,EAAKb,QACH,uDACGtG,MAAAA,OAAAA,EAAAA,EAAayB,SAChB,CACEyH,eAAgBvH,EAAYqH,iBAAiBC,YAGjD9B,EAAKJ,WAAWrC,YAAY,CAC1B7I,KAAM,qBACNsN,aAAcxH,EAAYqH,iBAAiBG,aAC3CtC,OAAQ,kCAAoC7G,MAAAA,OAAAA,EAAAA,EAAayB,SACzD2H,UAAU,GAEd,UAACjL,GAAAA,EAAAjB,KAAAiB,EAAAjB,KAAAH,GAAAA,GAAA,CAAA,CAsBA,GAtBA,OAAAwB,GAAAA,EAAArB,KAAAqB,EAAArB,KAAAJ,GAAAA,GAyBJ,EAAAoL,WAAAA,OAAAA,GAAAA,CAAA,GAAA,CAAA,WAAA,MAEI,OAAO,EAAE,WAQd,OAPMf,EAAKC,wBAA0BzF,EAAY4H,YAAYjB,WACzDnB,EAAKqC,oBAAoB7H,EAAY4H,YAAYE,eACjDtC,EAAKO,eAAiB/F,EAAY4H,YAAYjB,SAC9CnB,EAAKc,wBACLd,EAAKa,WAAW,kBACjBE,EAEH,EAAC,qBAEI,MAAM,EAAA,WAQX,OAPEf,EAAKJ,WAAWrC,YAAY,CAC1B7I,KAAM,OACNyM,SAAU3G,EAAY+H,WAAWpB,gBAChCJ,EAIL,EAAC,sBAMD,OAFEf,EAAK5J,QAAQ8I,QAAQ1E,QAAauG,EAEpC,EAAC,YAAAtL,QAAAC,QAAAsL,GAAAA,EAAAjL,KAAAiL,EAAAjL,KAAA,mBAAA,EAEL,CAAC,MAAA8C,GAAApD,OAAAA,QAAAqD,OAAAD,EAEO2J,CAAAA,EAAAA,KAAAA,sBAAwB,SAACjJ,GAC/B,IPvSgCkJ,EAC5BlO,EO4SgB,cAAhBsF,EAAKsG,QACPtG,EAAK+F,WAAWrC,YAAY,CAC1BmF,kBP/S4BD,EOuSRlJ,EAAMoB,KAAK,GAQuBpG,OP9StDA,EAAS,IAAIH,WAAWqO,GAEX1O,OAAO4O,KAAKC,OAAOC,aAAYC,MAAnBF,OAAuBrO,MOiTtD,EAEQwO,KAAAA,uBAAyB,SAAA1N,GAAiC,IAA9BsF,EAAItF,EAAJsF,KAChB,YAAdA,EAAKjG,MACPmF,EAAKgH,WAAWlG,EAAKqI,SAAW,YAAc,WAElD,OAEQX,oBAAsB,SAACY,GAC7BpJ,EAAKiG,OAAO3G,KAAKA,KAAKsF,MAAQ5E,EAAKyG,OACnCzG,EAAKiG,OAAO7K,QAAQwB,KAAKC,YAAY,CAAEhC,KAAM,qBAC7CmF,EAAKiG,OAAO7K,QAAQwB,KAAKC,YAAY,CACnChC,KAAM,SACNH,OAAQX,EAAoBqP,IAEhC,OAEQ7B,aAAe,WAErBvH,EAAKgH,WAAW,aAChBhH,EAAKiG,OAAO7K,QAAQwB,KAAKC,YAAY,CAAEhC,KAAM,cAC7CmF,EAAKiG,OAAO3G,KAAKA,KAAK+J,6BACpB,KACArJ,EAAKiG,OAAO/K,QAAQoO,YAAc,GAIpChJ,WAAW,WACTN,EAAKiG,OAAO3G,KAAKA,KAAKsF,MAAQ5E,EAAKyG,OACnCzG,EAAKiG,OAAO7K,QAAQwB,KAAKC,YAAY,CAAEhC,KAAM,oBAC/C,EAAG,IACL,OAEQyK,QAAU,SAAC7E,EAAiBvF,GAClCgI,QAAQ1E,MAAMiC,EAASvF,GACvB8E,EAAKzD,QAAQ+I,QAAQ7E,EAASvF,EAChC,OAEQqO,gBAAkB,SAACC,GACzB,GAA6B,IAAzBA,EAAcnP,OAChB,OAAO,EAMT,IADA,IAAIoM,EAAS,EACJjM,EAAI,EAAGA,EAAIgP,EAAcnP,OAAQG,IACxCiM,GAAU+C,EAAchP,GAAK,IAI/B,OAFAiM,GAAU+C,EAAcnP,QAER,EAAI,EAAIoM,EAAS,EAAI,EAAIA,CAC3C,EAEOgD,KAAAA,MAAQ,WAAM,OAAAzJ,EAAK+F,WAAWlG,cAAc,OAE5C6J,OAAS,iBAAsB,cAAhB1J,EAAKsG,MAAsB,EAAAhL,KAE1CqO,UAAY,SAAAC,GACjB5J,EAAKyG,OADqBmD,EAANnD,MAEtB,EAACnL,KAEMuO,0BAA4B,WAKjC,OAJuBC,MAAvB9J,EAAKuG,qBAALvG,EAAKuG,mBAAuB,IAAIhM,WAC9ByF,EAAKgG,MAAM7K,SAAS4O,oBAEtB/J,EAAKgG,MAAM7K,SAAS6O,qBAAqBhK,EAAKuG,oBACvCvG,EAAKuG,kBACd,OAEO0D,2BAA6B,WAKlC,OAJwB,MAAxBjK,EAAKwG,sBAALxG,EAAKwG,oBAAwB,IAAIjM,WAC/ByF,EAAKiG,OAAO9K,SAAS4O,oBAEvB/J,EAAKiG,OAAO9K,SAAS6O,qBAAqBhK,EAAKwG,qBACxCxG,EAAKwG,mBACd,EAEO0D,KAAAA,eAAiB,WACtB,OAAOlK,EAAKuJ,gBAAgBvJ,EAAK6J,4BACnC,EAACvO,KAEM6O,gBAAkB,WACvB,OAAOnK,EAAKuJ,gBAAgBvJ,EAAKiK,6BACnC,OAEOG,aAAe,SAACC,GAChBrK,EAAK4G,iBASV5G,EAAK+F,WAAWrC,YAAY,CAC1B7I,KAAM,WACNyP,MAAOD,EAAO,OAAS,UACvB/C,SAAUtH,EAAK0G,iBAEjB1G,EAAK2G,oBAAsB3G,EAAK0G,eAChC1G,EAAKiH,yBAdH/D,QAAQC,KACuB,IAA7BnD,EAAK2G,oBACD,8DACA,iFAYV,EApSmBrL,KAAOiB,QAAPA,EACAjB,KAAUyK,WAAVA,EACDzK,KAAK0K,MAALA,EACA1K,KAAM2K,OAANA,EAEhB3K,KAAKiB,QAAQ6I,UAAU,CAAEvF,eAAgBkG,EAAWlG,iBAEpDvE,KAAKyK,WAAWlC,aAAavI,KAAKwL,uBAClCxL,KAAKyK,WAAWpC,UAAUrI,KAAKqI,WAE/BrI,KAAK0K,MAAM5K,QAAQwB,KAAK2N,UAAYjP,KAAKqN,sBACzCrN,KAAK2K,OAAO7K,QAAQwB,KAAK2N,UAAYjP,KAAK4N,uBAC1C5N,KAAKyL,aAAa,YACpB,QAACjB,EAtEmB0E,aAAY,SAC9BjO,GAGsB,IAEtB,IAAMkO,EAAWC,EAAA,CAAA,EACZlG,EACAW,EACA5I,GAGLkO,EAAYjF,eAAe,CAAEc,OAAQ,eACrCmE,EAAYhF,wBAAwB,CAAEmB,iBAAiB,IAEvD,IAAIZ,EAAsB,KACtBD,EAAgC,KAChCE,EAAwB,KAAK,OAAArK,QAAAC,QAAA0C,aAE7B3C,OAAAA,QAAAC,QAGmCM,UAAUC,aAAaC,aAAa,CACvEC,OAAO,KACPJ,KAFIyO,SAAAA,GAG6D,OAA7C,MAAtBA,GAAAA,EAAwBhM,YAAYC,QAAQ,SAAAC,GAAS,OAAAA,EAAMC,MAAM,GAAElD,QAAAC,QAEhD8D,EAAWpE,OAAOgB,IAAQL,cAAA0O,GAAC,OAA9C7E,EAAU6E,EAAoChP,QAAAC,QACtBD,QAAQiP,IAAI,CAClC5P,EAAMM,OAAMmP,EAAA,GACP3E,EAAWjG,aACdnE,8BAA+BY,EAAQZ,iCAEzC0D,EAAO9D,OAAOwK,EAAWhG,iBACzB7D,KAAA,SAAA4O,GAEF,WAAWhF,EAAa2E,EAAa1E,EARpCC,EAAK8E,EAAA,GAAE7E,EAAM6E,EAQd,GAAgE,MAClE,EAAC,SAAQtM,GAAO,IAAAuM,EAAAC,EAEM,OADpBP,EAAYjF,eAAe,CAAEc,OAAQ,iBAC3B,OAAVyE,EAAAhF,IAAAgF,EAAYhM,QAAQnD,QAAAC,eAAAmP,EACdhF,UAAAgF,EAAOjM,SAAO7C,KAAA,WAAA,IAAA+O,EAAArP,OAAAA,QAAAC,QACdoP,OADcA,EACdhF,QAAAgF,EAAAA,EAAQlM,SAAO7C,KACrB,WAAA,MAAMsC,CAAM,EAAA,EACd,GACF,CAAC,MAAAQ,UAAApD,QAAAqD,OAAAD,KAAA8G,CAAA,CA7CsB,GAiWT,SAAAoF,EACdrL,EACAwK,EACAnJ,GAEA,gBAFAA,IAAAA,EAtWuB,6BAwWhBiK,MAASjK,8BAAkCrB,EAAc,YAAa,CAC3EuL,OAAQ,OACRC,KAAMzK,KAAKmC,UAAU,CACnBuI,SAAUjB,EAAO,OAAS,YAE5BkB,QAAS,CACP,eAAgB,qBAGtB"}